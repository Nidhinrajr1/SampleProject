/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import Main.SaveTable;
import Main.resultFetch;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import run.DBConnect;
import run.DBInterface;

public class SubjectWiseResult extends javax.swing.JFrame implements DBInterface {

    Connection con;
    private int whichROw;
    DefaultTableModel model;

    public SubjectWiseResult() {
        initComponents();
        this.setTitle("Campulse Result analysis :Subject Results");
        con = DBConnect.connection;
        this.setLocationRelativeTo(null);
        retrieveSubjectNames();
        fillSubjectCombo();

        model = new DefaultTableModel() {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        // StudentMarksTable.setModel(model);
        model.addColumn("USN");
        model.addColumn("NAME");
        model.addColumn("INTERNAL");
        model.addColumn("EXTERNAL");
        model.addColumn("TOTAL");
        model.addColumn("CLASS");

        bSubmit.doClick();
        studentMarksTable.setAutoCreateRowSorter(true);
        studentMarksTable.getColumn("USN").setPreferredWidth(100);
        studentMarksTable.getColumn("NAME").setPreferredWidth(150);
        studentMarksTable.getColumn("INTERNAL").setPreferredWidth(50);
        studentMarksTable.getColumn("EXTERNAL").setPreferredWidth(50);
        studentMarksTable.getColumn("TOTAL").setPreferredWidth(40);
        studentMarksTable.getColumn("CLASS").setPreferredWidth(40);
        examType.setSelectedIndex(2);
        studentMarksTable.setCellSelectionEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label4 = new javax.swing.JLabel();
        subjectCombo = new javax.swing.JComboBox();
        label3 = new javax.swing.JLabel();
        label1 = new javax.swing.JLabel();
        bSubmit = new javax.swing.JButton();
        lastValue = new javax.swing.JSpinner();
        firstValue = new javax.swing.JSpinner();
        examType = new javax.swing.JComboBox();
        label2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentMarksTable = new javax.swing.JTable();
        lcount = new javax.swing.JLabel();
        bSave = new javax.swing.JButton();
        bClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Subject Wise Result");
        setResizable(false);

        label4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label4.setText("in");

        subjectCombo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        subjectCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EMPTY" }));
        subjectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectComboActionPerformed(evt);
            }
        });

        label3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label3.setText("and");

        label1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label1.setText("How many got  ");

        bSubmit.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bSubmit.setText("OK");
        bSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSubmitActionPerformed(evt);
            }
        });

        lastValue.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lastValue.setModel(new javax.swing.SpinnerNumberModel(125, 0, 200, 1));

        firstValue.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        firstValue.setModel(new javax.swing.SpinnerNumberModel(0, 0, 125, 1));

        examType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        examType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Internal", "External", "Total", "Failed" }));
        examType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examTypeActionPerformed(evt);
            }
        });

        label2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        label2.setText("mark between");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(subjectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(bSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(label1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(examType, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(label2)
                        .addGap(18, 18, 18)
                        .addComponent(firstValue, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(label3)
                        .addGap(18, 18, 18)
                        .addComponent(lastValue, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {firstValue, lastValue});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1)
                    .addComponent(label3)
                    .addComponent(lastValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label4)
                    .addComponent(examType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subjectCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSubmit))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        studentMarksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "USN", "Name", "Internal", "External", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(studentMarksTable);

        lcount.setForeground(new java.awt.Color(0, 0, 255));
        lcount.setText("COUNT WILL BE DIPLAYED HERE");

        bSave.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bSave.setText("Save Results");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });

        bClose.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bClose.setText("Close");
        bClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bSave)
                .addGap(39, 39, 39)
                .addComponent(bClose)
                .addGap(47, 47, 47))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lcount)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bClose, bSave});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lcount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bClose, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void subjectComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectComboActionPerformed
        bSubmit.doClick();
    }//GEN-LAST:event_subjectComboActionPerformed

    private void bSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSubmitActionPerformed

        Statement stmt = null;
        ResultSet rs = null;
        String query = "";
        String SelectedSubjectName;
        String RetrieveQuery;
        String usn;
        String studentName;
        int internalMark;
        int externalMark;
        int totalMark;
        String passOrFail;
        int rowCount = 0;
        boolean insertflag = false;

        int lowLimit = Integer.parseInt(firstValue.getValue().toString()) - 1;
        int highLimit = Integer.parseInt(lastValue.getValue().toString()) + 1;
        int typeValue = examType.getSelectedIndex() + 1;
        //get USN from user

        model.setRowCount(0);
        studentMarksTable.setModel(model);
        /*
         if (subjectCombo.getSelectedIndex() == 8 || subjectCombo.getSelectedIndex() == 9) {

         studentMarksTable.getColumn("USN").setPreferredWidth(100);
         studentMarksTable.getColumn("NAME").setPreferredWidth(150);
         studentMarksTable.getColumn("INTERNAL").setPreferredWidth(10);
         studentMarksTable.getColumn("EXTERNAL").setPreferredWidth(10);
         studentMarksTable.getColumn("TOTAL").setPreferredWidth(40);
         studentMarksTable.getColumn("CLASS").setPreferredWidth(100);
         } else {
         studentMarksTable.getColumn("USN").setPreferredWidth(100);
         studentMarksTable.getColumn("NAME").setPreferredWidth(150);
         studentMarksTable.getColumn("INTERNAL").setPreferredWidth(50);
         studentMarksTable.getColumn("EXTERNAL").setPreferredWidth(50);
         studentMarksTable.getColumn("TOTAL").setPreferredWidth(40);
         studentMarksTable.getColumn("CLASS").setPreferredWidth(40);
         }*/

        //query = "select DISTINCT * from RESULTTABLE";
        query = "select DISTINCT " + STUDENT_DETAILS + "." + ST_USN + "," + ST_NAME + "," + ST_TOTAL + "," + ST_RESULT + "," + SUB_INTERNAL + "," + SUB_EXTERNAL + "," + SUB_TOTAL + "," + SUB_RESULT + " from " + SUBJECT_DETAILS + "," + STUDENT_DETAILS + " where " + STUDENT_DETAILS + "." + ST_USN + " = " + SUBJECT_DETAILS + "." + SUB_USN;
        if (subjectCombo.getSelectedItem() != null) {

            SelectedSubjectName = subjectCombo.getSelectedItem().toString();
            RetrieveQuery = query + " AND " + SUB_SUBNAME + "= '" + SelectedSubjectName + "'";
            // System.out.println("RetrieveQuery : " + RetrieveQuery);
            try {
                stmt = con.createStatement();
                rs = stmt.executeQuery(RetrieveQuery);
            } catch (SQLException ex) {
                Logger.getLogger(SubjectWiseResult.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                while (rs.next()) {
                    usn = rs.getString(ST_USN);
                    studentName = rs.getString(ST_NAME);
                    internalMark = rs.getInt(SUB_INTERNAL);
                    externalMark = rs.getInt(SUB_EXTERNAL);
                    totalMark = rs.getInt(SUB_TOTAL);
                    passOrFail = rs.getString(SUB_RESULT);
                    if (examType.getSelectedIndex() == 0 && internalMark > lowLimit && internalMark < highLimit) {
                        model.insertRow(rowCount++, new Object[]{usn, studentName, internalMark, externalMark, totalMark, passOrFail});
                    } else if (examType.getSelectedIndex() == 1 && externalMark > lowLimit && externalMark < highLimit) {
                        model.insertRow(rowCount++, new Object[]{usn, studentName, internalMark, externalMark, totalMark, passOrFail});
                    } else if (examType.getSelectedIndex() == 2 && totalMark > lowLimit && totalMark < highLimit) {
                        //insertflag = true;
                        model.insertRow(rowCount++, new Object[]{usn, studentName, internalMark, externalMark, totalMark, passOrFail});
                    } else if (examType.getSelectedIndex() == 3 && passOrFail.equalsIgnoreCase("f")) {
                        model.insertRow(rowCount++, new Object[]{usn, studentName, internalMark, externalMark, totalMark, passOrFail});
                    }
                }

                if (examType.getSelectedIndex() == 3) {
                    lcount.setText(Integer.toString(model.getRowCount()) + " Students failed in " + subjectCombo.getSelectedItem().toString());
                } else {
                    lcount.setText(Integer.toString(model.getRowCount()) + " Students scored between " + firstValue.getValue() + " and " + lastValue.getValue() + " in  " + examType.getSelectedItem().toString() + " of " + subjectCombo.getSelectedItem().toString());
                }
            } catch (SQLException ex) {
                Logger.getLogger(SubjectWiseResult.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_bSubmitActionPerformed

    private void bCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_bCloseActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        SaveTable ST = new SaveTable(model);
    }//GEN-LAST:event_bSaveActionPerformed

    private void examTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examTypeActionPerformed
        if (examType.getSelectedIndex() == 3) {
            firstValue.setEnabled(false);
            lastValue.setEnabled(false);
            label1.setText("How Many ");
            label2.setText(" in ");
            label3.setText(null);
            label4.setText(null);
        } else {
            firstValue.setEnabled(true);
            lastValue.setEnabled(true);
            label1.setText("How Many got ");
            label2.setText(" mark between ");
            label3.setText(" and ");
            label4.setText(" in ");
        }
        bSubmit.doClick();

    }//GEN-LAST:event_examTypeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bClose;
    private javax.swing.JButton bSave;
    private javax.swing.JButton bSubmit;
    private javax.swing.JComboBox examType;
    private javax.swing.JSpinner firstValue;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label3;
    private javax.swing.JLabel label4;
    private javax.swing.JSpinner lastValue;
    private javax.swing.JLabel lcount;
    private javax.swing.JTable studentMarksTable;
    private javax.swing.JComboBox subjectCombo;
    // End of variables declaration//GEN-END:variables

    private void fillSubjectCombo() {

        Vector comboBoxItems = new Vector();

        for (int i = 0; i < MainForm.subNamesV.size(); i++) {
            comboBoxItems.add(MainForm.subNamesV.get(i));
        }
        DefaultComboBoxModel model = new DefaultComboBoxModel(comboBoxItems);

        subjectCombo.setModel(model);

    }

    public void retrieveSubjectNames() {
        MainForm.subNamesV.clear();

        ResultSet rs = null;
        String sql = "Select DISTINCT " + SUB_SUBNAME + " From " + SUBJECT_DETAILS;
        try {
            Statement stmt = con.createStatement();
            rs = stmt.executeQuery(sql);

            while (rs.next()) {
                MainForm.subNamesV.add(rs.getString(SUB_SUBNAME));
            }
        } catch (SQLException ex) {
            Logger.getLogger(resultFetch.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
