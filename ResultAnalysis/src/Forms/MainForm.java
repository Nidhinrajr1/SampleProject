package Forms;

import Main.DownloadMarksTask;
import Main.SaveTable;
import com.blink9.util.OTAUpdateCheck;
import java.awt.Color;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import run.DBConnect;
import run.DBInterface;

public class MainForm extends javax.swing.JFrame implements DBInterface {

    public static final double VERSION = 1.0;
    private static final String UPDATE_LINK = "https://889020c3998fcd81f04ce8776ae93c6062ea5d7c.googledrive.com/host/0B4eiq8kAgqmyTl80TDZFdk9zMVE/CampulseResultAnalysis.xml";
    //private static final String UPDATE_LINK = "http://192.168.1.14/campulseResultAnalysis.xml";
    OTAUpdateCheck update = new OTAUpdateCheck();

    public static int sem;
    public static int timeout = 25;
    public static boolean autoRetry = true;
    public static int retrylimit = 10;
    public static Vector<String> usnList = new Vector<>();
    public static Vector<String> subNamesV = new Vector<>();
    public static Vector<String> RetryList = new Vector<>();
    public static boolean stopFlag = true;
    public static DownloadDetailsForm DF;
    private final int fetchCount;
    public static MainForm objCopy;
    DownloadMarksTask task;
    boolean subjectFetched = false; // this is again initialized in start button
    int subjectFetchTries = 5;  // this value is again initialized in start button action
    boolean toggleHide = false;
    public static int DownloadServer = 0;

    public MainForm() {
        initComponents();

        this.setTitle("Campulse Result analysis - V" + VERSION);
        setPreferredSize(new Dimension(470, 515));
        this.pack();
        this.setLocationRelativeTo(null);
        DF = new DownloadDetailsForm();
        DefaultCaret caret = (DefaultCaret) textAreaLog.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        stopbtn.setEnabled(false);
        b_retry.setEnabled(false);
        menuAutoRetry.setSelected(true);
        fetchCount = 0;

        //OTA UPDATE SETTINGS
        update.setAppName("Campulse Result Analysis");
        update.setCurrentAppVersion(VERSION);
        update.setUpdateCheckUrl(UPDATE_LINK);
        update.showUpdateDialog(true);
        new Thread() {
            public void run() {
                try {
                    Thread.sleep(5000);
                    log("Checking for Updates");
                    if (update.checkForUpdates()) {
                        logError("An important update is available.");
                    } else {
                        log("No updates Available");
                    }

                } catch (InterruptedException ex) {
                    logError("Error Checking for updates");
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    logError("Error Checking for updates");
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BGinput = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        submitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        bView = new javax.swing.JButton();
        stopbtn = new javax.swing.JButton();
        B_UsnSelect = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        bSubjectWise = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btn_saveList = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        b_retry = new javax.swing.JButton();
        bGetReport = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        ComboServer = new javax.swing.JComboBox();
        Combo_sem = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        usnProgressBar = new javax.swing.JProgressBar(0,100);
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaLog = new javax.swing.JTextPane();
        ToggleMoreLess = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuNew = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();
        menuTools = new javax.swing.JMenu();
        menuAutoRetry = new javax.swing.JCheckBoxMenuItem();
        menuSetProxy = new javax.swing.JMenuItem();
        menuSetTimeOut = new javax.swing.JMenuItem();
        menu_help = new javax.swing.JMenu();
        btn_update = new javax.swing.JMenuItem();
        menuAboutUs = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vtu Marks Downloader");
        setPreferredSize(new java.awt.Dimension(470, 515));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Class Result", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        submitButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        submitButton.setText("Start");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Start Downloading :");

        bView.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bView.setText("View");
        bView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bViewActionPerformed(evt);
            }
        });

        stopbtn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        stopbtn.setText("Stop");
        stopbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopbtnActionPerformed(evt);
            }
        });

        B_UsnSelect.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        B_UsnSelect.setText("Select");
        B_UsnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_UsnSelectActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Select USN List  :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("View Results :");

        bSubjectWise.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bSubjectWise.setText("Subject Wise");
        bSubjectWise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSubjectWiseActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Save results :");

        btn_saveList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_saveList.setText("Save");
        btn_saveList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveListActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setText("Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        b_retry.setText("Retry");
        b_retry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_retryActionPerformed(evt);
            }
        });

        bGetReport.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        bGetReport.setText("Report");
        bGetReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGetReportActionPerformed(evt);
            }
        });

        jLabel6.setText("Select  Server :");

        ComboServer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "VTU Alerts", "VTU Main" }));
        ComboServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboServerActionPerformed(evt);
            }
        });

        Combo_sem.setEditable(true);
        Combo_sem.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Combo_sem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8" }));
        Combo_sem.setToolTipText(") is default. Recommened to mention semester");
        Combo_sem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Combo_semActionPerformed(evt);
            }
        });

        jLabel3.setText("Sem :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(66, 66, 66)
                        .addComponent(bView, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(bSubjectWise, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(70, 70, 70)
                        .addComponent(btn_saveList, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(bGetReport, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(ComboServer, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(Combo_sem, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(B_UsnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addComponent(stopbtn)
                                .addGap(6, 6, 6)
                                .addComponent(b_retry)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(ComboServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Combo_sem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(B_UsnSelect)
                        .addComponent(jButton1)))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1))
                    .addComponent(submitButton)
                    .addComponent(stopbtn)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(b_retry)))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel4))
                    .addComponent(bView)
                    .addComponent(bSubjectWise))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(btn_saveList))
                    .addComponent(bGetReport))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Details ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jScrollPane2.setViewportView(textAreaLog);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
        );

        ToggleMoreLess.setText("Hide <<");
        ToggleMoreLess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToggleMoreLessActionPerformed(evt);
            }
        });

        menuFile.setText("File");

        menuNew.setText("New");
        menuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewActionPerformed(evt);
            }
        });
        menuFile.add(menuNew);

        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuFile.add(menuExit);

        jMenuBar1.add(menuFile);

        menuTools.setText("Tools");

        menuAutoRetry.setSelected(true);
        menuAutoRetry.setText("Auto Retry");
        menuAutoRetry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAutoRetryActionPerformed(evt);
            }
        });
        menuTools.add(menuAutoRetry);

        menuSetProxy.setText("Set Proxy");
        menuSetProxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSetProxyActionPerformed(evt);
            }
        });
        menuTools.add(menuSetProxy);

        menuSetTimeOut.setText("Set Time Out");
        menuSetTimeOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSetTimeOutActionPerformed(evt);
            }
        });
        menuTools.add(menuSetTimeOut);

        jMenuBar1.add(menuTools);

        menu_help.setText("Help");

        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });
        menu_help.add(btn_update);

        menuAboutUs.setText("About Us");
        menuAboutUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutUsActionPerformed(evt);
            }
        });
        menu_help.add(menuAboutUs);

        jMenuBar1.add(menu_help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ToggleMoreLess)
                        .addGap(18, 18, 18)
                        .addComponent(usnProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usnProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToggleMoreLess))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void B_UsnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_UsnSelectActionPerformed
        EnterUsnForm u = new EnterUsnForm();
        u.setVisible(true);
    }//GEN-LAST:event_B_UsnSelectActionPerformed

    private void stopbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopbtnActionPerformed
        logError("Result Fetching Interrupted");
        stopbtn.setEnabled(false);
        stopFlag = true;
        clickStop();
    }//GEN-LAST:event_stopbtnActionPerformed

    private void bViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bViewActionPerformed
        new DisplayForm().setVisible(true);
    }//GEN-LAST:event_bViewActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        log("Result fetching started ...");
        log("Please wait till fetching has completed.");
        usnProgressBar.setValue(usnProgressBar.getMinimum());
        if (usnList.isEmpty()) {
            logError("Please Add atleast 1 USN to fetch result");
            JOptionPane.showMessageDialog(null, "Please Add at least 1 USN");
        } else {
            int opt = JOptionPane.showConfirmDialog(null, "Do you want to clear pervious fetch results ??", "New", JOptionPane.OK_CANCEL_OPTION);
            if (opt == 0) {
                menuNew.doClick();
            }
            stopFlag = false;
            submitButton.setEnabled(false);
            stopbtn.setEnabled(true);
            updateProgress();
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void menuSetProxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSetProxyActionPerformed
        new ProxyForm().setVisible(true);
    }//GEN-LAST:event_menuSetProxyActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private void bSubjectWiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSubjectWiseActionPerformed
        SubjectWiseResult frame = new SubjectWiseResult();
        frame.setVisible(true);
    }//GEN-LAST:event_bSubjectWiseActionPerformed

    private void btn_saveListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveListActionPerformed
        Connection con = DBConnect.connection;
        DefaultTableModel model = new DefaultTableModel();

        // Table Column names 
        model.addColumn("USN");
        model.addColumn("NAME");
        model.addColumn("SUBJECT 1");
        model.addColumn("INTERNAL");
        model.addColumn("EXTERNAL");
        model.addColumn("TOTAL");
        model.addColumn("RESULT");
        model.addColumn("SUBJECT 2");
        model.addColumn("INTERNAL");
        model.addColumn("EXTERNAL");
        model.addColumn("TOTAL");
        model.addColumn("RESULT");
        model.addColumn("SUBJECT 3");
        model.addColumn("INTERNAL");
        model.addColumn("EXTERNAL");
        model.addColumn("TOTAL");
        model.addColumn("RESULT");
        model.addColumn("SUBJECT 4");
        model.addColumn("INTERNAL");
        model.addColumn("EXTERNAL");
        model.addColumn("TOTAL");
        model.addColumn("RESULT");
        model.addColumn("SUBJECT 5");
        model.addColumn("INTERNAL");
        model.addColumn("EXTERNAL");
        model.addColumn("TOTAL");
        model.addColumn("RESULT");
        model.addColumn("SUBJECT 6");
        model.addColumn("INTERNAL");
        model.addColumn("EXTERNAL");
        model.addColumn("TOTAL");
        model.addColumn("RESULT");
        if (sem < 8) {
            model.addColumn("SUBJECT 7");
            model.addColumn("INTERNAL");
            model.addColumn("EXTERNAL");
            model.addColumn("TOTAL");
            model.addColumn("RESULT");
            model.addColumn("SUBJECT 8");
            model.addColumn("INTERNAL");
            model.addColumn("EXTERNAL");
            model.addColumn("TOTAL");
            model.addColumn("RESULT");
        }
        model.addColumn("FINAL TOTAL");
        model.addColumn("CLASS");
        int count = 0;
        String queryStd = "select " + ST_NAME + "," + ST_USN + "," + ST_TOTAL + "," + ST_RESULT + " from " + STUDENT_DETAILS + " ORDER BY " + ST_USN;
        Statement stmtStd, stmtSub;
        ResultSet rsStd, rsSub;
        Vector<String> subNames = new Vector<>();
        Vector<Integer> Internals = new Vector<>();
        Vector<Integer> Externals = new Vector<>();
        Vector<Integer> Total = new Vector<>();
        Vector<String> Result = new Vector<>();
        try {
            stmtStd = con.createStatement();
            rsStd = stmtStd.executeQuery(queryStd);
            while (rsStd.next()) { // loop till we find all students details
                // System.out.println("Student is : " + rsStd.getString(ST_USN));
                String querySub = "select " + SUB_SUBNAME + "," + SUB_INTERNAL + "," + SUB_EXTERNAL + "," + SUB_TOTAL + "," + SUB_RESULT + " FROM " + SUBJECT_DETAILS + " WHERE " + SUB_USN + " = '" + rsStd.getString(ST_USN) + "'";
                stmtSub = con.createStatement();
                rsSub = stmtSub.executeQuery(querySub);
                while (rsSub.next()) {
                    subNames.add(rsSub.getString(SUB_SUBNAME));
                    Internals.add(rsSub.getInt(SUB_INTERNAL));
                    Externals.add(rsSub.getInt(SUB_EXTERNAL));
                    Total.add(rsSub.getInt(SUB_TOTAL));
                    Result.add(rsSub.getString(SUB_RESULT));
                }
                if (sem < 8) {
                    model.insertRow(count++, new Object[]{rsStd.getString(ST_USN), rsStd.getString(ST_NAME),
                        subNames.get(0), Internals.get(0), Externals.get(0), Total.get(0), Result.get(0),
                        subNames.get(1), Internals.get(1), Externals.get(1), Total.get(1), Result.get(1),
                        subNames.get(2), Internals.get(2), Externals.get(2), Total.get(2), Result.get(2),
                        subNames.get(3), Internals.get(3), Externals.get(3), Total.get(3), Result.get(3),
                        subNames.get(4), Internals.get(4), Externals.get(4), Total.get(4), Result.get(4),
                        subNames.get(5), Internals.get(5), Externals.get(5), Total.get(5), Result.get(5),
                        subNames.get(6), Internals.get(6), Externals.get(6), Total.get(6), Result.get(6),
                        subNames.get(7), Internals.get(7), Externals.get(7), Total.get(7), Result.get(7),
                        rsStd.getInt(ST_TOTAL), rsStd.getString(ST_RESULT)});
                } else {
                    model.insertRow(count++, new Object[]{rsStd.getString(ST_USN), rsStd.getString(ST_NAME),
                        subNames.get(0), Internals.get(0), Externals.get(0), Total.get(0), Result.get(0),
                        subNames.get(1), Internals.get(1), Externals.get(1), Total.get(1), Result.get(1),
                        subNames.get(2), Internals.get(2), Externals.get(2), Total.get(2), Result.get(2),
                        subNames.get(3), Internals.get(3), Externals.get(3), Total.get(3), Result.get(3),
                        subNames.get(4), Internals.get(4), Externals.get(4), Total.get(4), Result.get(4),
                        subNames.get(5), Internals.get(5), Externals.get(5), Total.get(5), Result.get(5),
                        rsStd.getInt(ST_TOTAL), rsStd.getString(ST_RESULT)});
                }

                subNames.removeAllElements();
                Internals.removeAllElements();
                Externals.removeAllElements();
                Total.removeAllElements();
                Result.removeAllElements();
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);

        } catch (Exception e) {
            MainForm.logError("Make sure you have selected the correct semester");
            return;
        }
        SaveTable ST = new SaveTable(model);
    }//GEN-LAST:event_btn_saveListActionPerformed

    private void menuAboutUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutUsActionPerformed
        new AboutUs().setVisible(true);
    }//GEN-LAST:event_menuAboutUsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DF.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void menuSetTimeOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSetTimeOutActionPerformed
        Object[] timeArray = {"5", "10", "15", "20", "25"};
        Object str = JOptionPane.showInputDialog(null, "Select the timeout (in seconds) : ", "Set time out", JOptionPane.QUESTION_MESSAGE, null, timeArray, timeArray[4]);
        if (str != null) {
            System.out.println("str is : " + str);
            timeout = Integer.parseInt(str.toString());
            if (timeout == 0) {
                timeout = 25;
            }
        } else {
            System.out.println("cancelled");
        }
    }//GEN-LAST:event_menuSetTimeOutActionPerformed

    private void b_retryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_retryActionPerformed
        clickRestart();
    }//GEN-LAST:event_b_retryActionPerformed

    private void menuAutoRetryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAutoRetryActionPerformed
        BufferedWriter out = null;
        FileWriter fstream;
        if (menuAutoRetry.isSelected()) {
            autoRetry = true;
            Object[] limitArray = {"1", "3", "5", "10", "20", "INF"};
            Object str = JOptionPane.showInputDialog(null, "Select Number of retry Attempts : ", "Set Retry Attempts", JOptionPane.QUESTION_MESSAGE, null, limitArray, limitArray[3]);
            if (str != null) {
                MainForm.log("Auto Retry Attempts set to : " + str);
                if (str.equals("INF")) {
                    retrylimit = 999;
                } else {
                    retrylimit = Integer.parseInt(str.toString());
                }

            } else {
                System.out.println("cancelled");
            }
            log("Auto retry is Enabled. USN failed to fetch will be retried automatically");
        } else {
            autoRetry = false;
            log("Auto retry is Disabled. Please Click retry to fetch failed USN list");
        }

    }//GEN-LAST:event_menuAutoRetryActionPerformed

    private void menuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewActionPerformed
        Connection con = DBConnect.connection;
        int x = JOptionPane.showConfirmDialog(null, "This will delete all your previous records\nAre you sure you want to continue ?", "New database", JOptionPane.OK_CANCEL_OPTION);
        if (x == 0) {
            log("Deleting previous records !");

            Statement stmtSt = null, stmtSub = null, stmtBack = null;
            String querySt = " Delete  from " + STUDENT_DETAILS;
            String querySub = "Delete  from " + SUBJECT_DETAILS;
            String queryBack = "Delete  from " + BACKSUB_DETAILS;
            try {
                stmtSt = con.createStatement();
                stmtSub = con.createStatement();
                stmtBack = con.createStatement();
                stmtSt.executeUpdate(querySt);
                stmtSub.executeUpdate(querySub);
                stmtBack.executeUpdate(queryBack);

            } catch (SQLException ex) {
                log(ex.getMessage());
                Logger.getLogger(DownloadMarksTask.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_menuNewActionPerformed

    private void ToggleMoreLessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToggleMoreLessActionPerformed
        if (toggleHide) {
            toggleHide = false;
            ToggleMoreLess.setText("Hide <<");
            setPreferredSize(new Dimension(470, 515));
            this.pack();
        } else {
            toggleHide = true;
            ToggleMoreLess.setText("More >>");
            setPreferredSize(new Dimension(470, 340));
            this.pack();
        }
    }//GEN-LAST:event_ToggleMoreLessActionPerformed

    private void bGetReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGetReportActionPerformed
        GetReportForm getreport = new GetReportForm();
        getreport.setVisible(true);
    }//GEN-LAST:event_bGetReportActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("closed");
        try {
            DBConnect.connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void ComboServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboServerActionPerformed
        log("Server Selected : " + ComboServer.getSelectedItem());
        if (ComboServer.getSelectedIndex() == 1) {
            DownloadServer = 1;
            logError("Only latest results can be fetched from VTU RESULTS server");
        } else {
            DownloadServer = 0;
        }
    }//GEN-LAST:event_ComboServerActionPerformed

    private void Combo_semActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Combo_semActionPerformed
        sem = Integer.parseInt(Combo_sem.getSelectedItem().toString());
    }//GEN-LAST:event_Combo_semActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        boolean ret = false;
        try {
            log("Checking for Updates");
            ret = update.checkForUpdates();
        } catch (Exception ex) {
            System.out.println("Update exception");
        }

        if (!ret) {
            JOptionPane.showMessageDialog(null, "No Updates found", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            logError("An important update is available.");
        }
    }//GEN-LAST:event_btn_updateActionPerformed

    public static void setSem(int sem) {
        Combo_sem.setSelectedItem(sem);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, ex);
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            JOptionPane.showMessageDialog(null, ex);
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            JOptionPane.showMessageDialog(null, ex);
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            JOptionPane.showMessageDialog(null, ex);
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                objCopy = new MainForm();
                objCopy.setVisible(true);
                log("Welcome to Result extractor.");
                run.DBConnect.getConnection();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BGinput;
    private javax.swing.JButton B_UsnSelect;
    private javax.swing.JComboBox ComboServer;
    private static javax.swing.JComboBox Combo_sem;
    private javax.swing.JButton ToggleMoreLess;
    private javax.swing.JButton bGetReport;
    private javax.swing.JButton bSubjectWise;
    private javax.swing.JButton bView;
    private javax.swing.JButton b_retry;
    private javax.swing.JButton btn_saveList;
    private javax.swing.JMenuItem btn_update;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem menuAboutUs;
    private javax.swing.JCheckBoxMenuItem menuAutoRetry;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuNew;
    private javax.swing.JMenuItem menuSetProxy;
    private javax.swing.JMenuItem menuSetTimeOut;
    private javax.swing.JMenu menuTools;
    private javax.swing.JMenu menu_help;
    private javax.swing.JButton stopbtn;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextPane textAreaLog;
    public javax.swing.JProgressBar usnProgressBar;
    // End of variables declaration//GEN-END:variables

    private void updateProgress() {
        usnProgressBar.setMinimum(0);
        usnProgressBar.setMaximum(100);

        task = new Main.DownloadMarksTask();
        task.addPropertyChangeListener(
                new PropertyChangeListener() {
                    public void propertyChange(PropertyChangeEvent evt) {
                        if ("progress".equals(evt.getPropertyName())) {
                            usnProgressBar.setValue((Integer) evt.getNewValue());
                        }
                    }
                });
        task.execute();
    }

    public void clickStop() {
        submitButton.setEnabled(true);
        task.stopFetching();
        b_retry.setEnabled(true);
    }

    public void clickRestart() {
        b_retry.setEnabled(false);
        log("Retrying to fetch Failed Usn list.");
        log("Please Wait !");
        System.out.println("retrying !!");
        usnList.clear();
        for (int i = 0; i < RetryList.size(); i++) {
            System.out.println(RetryList.get(i));
            usnList.add(RetryList.get(i));
        }
        RetryList.clear();
        usnProgressBar.setValue(usnProgressBar.getMinimum());
        stopFlag = false;
        submitButton.setEnabled(false);
        stopbtn.setEnabled(true);
        updateProgress();
    }

    public static void log(String text) {  // normal log with black text
        objCopy.appendToPane("> " + text + "\n", Color.BLACK);
    }

    public static void logError(String text) { // error log with red text
        objCopy.appendToPane("> " + text + "\n", Color.RED);
    }

    private void appendToPane(String msg, Color c) { // used by error log to make text red        
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);
        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);
        int len = textAreaLog.getDocument().getLength();
        textAreaLog.setCaretPosition(len);
        textAreaLog.setCharacterAttributes(aset, false);
        textAreaLog.replaceSelection(msg);
    }
}
